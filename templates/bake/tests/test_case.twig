{% set isController = type|lower == 'controller' %}
{% set isCommand = type|lower == 'command' %}
{% if isController %}
    {%- set traitName = 'IntegrationTestTrait' %}
    {%- set uses = uses|merge(['Cake\\TestSuite\\IntegrationTestTrait']) %}
{% elseif isCommand %}
    {%- set traitName = 'ConsoleIntegrationTestTrait' %}
    {%- set uses = uses|merge(['Cake\\Console\\TestSuite\\ConsoleIntegrationTestTrait']) %}
{% endif %}
{%- set uses = uses|merge(["Cake\\TestSuite\\TestCase", "PHPUnit\\Framework\\Attributes\\CoversClass", "PHPUnit\\Framework\\Attributes\\Test"]) %}

{{- element('Bake.file_header', {
    namespace: "#{baseNamespace}\\Test\\TestCase\\#{subNamespace}",
    classImports: uses,
}) }}

/**
 * {{ className }}.
 */
#[CoversClass({{ className }}::class)]
class {{ className }}Test extends TestCase
{
{% if traitName is defined %}
    use {{ traitName }};
{% if properties or fixtures or construction or methods %}

{% endif %}
{% endif %}
{% if properties %}
{% for propertyInfo in properties %}
{% if loop.index > 1 %}

{% endif %}
    /**
     * {{ propertyInfo.description }}
     *
     * @var {{ propertyInfo.type }}
     */
    protected ${{ propertyInfo.name }}{% if propertyInfo.value is defined and propertyInfo.value %} = {{ propertyInfo.value }}{% endif %};
{% if loop.last and (fixtures or construction or methods) %}

{% endif %}
{% endfor %}
{% endif %}

{%- if fixtures %}
    /**
     * @var list<string>
     */
    protected array $fixtures = {{ Bake.exportVar(fixtures|values, 1)|raw }};
{% if construction or methods %}

{% endif %}
{% endif %}

{%- if construction %}
    /**
     * @inheritDoc
     */
    protected function setUp(): void
    {
        parent::setUp();

{% if preConstruct %}
        {{ preConstruct|raw }}
{% endif %}
{% if isCommand %}
        {{ construction|raw }}
{% else %}
        $this->{{ (subject ~ ' = ' ~ construction)|raw }}
{% endif %}
{% if postConstruct %}
        {{ postConstruct|raw }}
{% endif %}
    }
{% if not isCommand %}
{% if methods %}

{% endif %}
{% endif %}
{% endif %}

{%- for method in methods %}
{% if loop.index > 1 %}

{% endif %}
    #[Test]
    public function test{{ method|camelize }}(): void
    {
        $this->markTestIncomplete('Not implemented yet.');
    }
{% endfor %}
}
